# Authentication Microservice

An authentication microservice with user management CRUD operations and JWT authentication, containerized with Docker.

## Features

- User registration and login
- JWT authentication
- Password hashing with bcrypt
- CRUD operations for users
- Docker containerization

## API Endpoints

### Public Routes
- `POST /api/auth/register` - Register a new user
- `POST /api/auth/login` - Login a user

### Protected Routes (require authentication)
- `GET /api/auth/me` - Get current user
- `PUT /api/auth/updatedetails` - Update user details
- `PUT /api/auth/updatepassword` - Update password
- `DELETE /api/auth/deleteuser` - Delete user

## Getting Started

1. Clone the repository
2. Install docker
3. Create a .env file with these variables:
  ```
    PORT=5000
    MONGO_URI=mongodb://mongo:27017/auth-service
    JWT_SECRET=your_jwt_secret_here  # replace with your own secret key
    JWT_EXPIRE=30d
  ```
3. Run `docker compose up` to start the application
4. The API should then be available at http://localhost:5000

## Authentication

To authenticate users, put the JWT token in your request header:
```
Authorization: Bearer YOUR_TOKEN
```

## Environment Variables

- `PORT` - Server port (default: 5000)
- `MONGO_URI` - MongoDB connection string
- `JWT_SECRET` - Secret key for JWT
- `JWT_EXPIRE` - JWT expiration time